# +----------------------------------------------------------------------------------------------+
# |                                   Translation Settings                                       |
# |                                                                                              |
# |     These settings control how the plugin will apply locale translations per player          |
# |     for each message sent by the plugin. The plugin will use the player's                    |
# |     specified language as set by their client, and if a translation for that language        |
# |     exists, all messages will be translated into that language for that player.              |
# |                                                                                              |
# |     All translations are managed via Crowdin, controlled via the following link:             |
# |     |=> https://crowdin.com/project/gts                                                      |
# |                                                                                              |
# |     Thanks to this design, GTS no longer needs to wait  for an update to install a new       |
# |     translation set available for all users of the plugin. At any time, translations         |
# |     can be overridden using the custom repository, where you can deviate from the            |
# |     provided translations and apply your own formatting and styling.                         |
# +----------------------------------------------------------------------------------------------+
translations {

    # Allows GTS to fetch and install translations from the repository should any be missing
    # or updates are available. Translations are still capable of being overridden via the
    # custom translation repository.
    auto-install = true

    # Specifies how text should be processed when being translated for a particular user.
    # By default, GTS ships with translations built under the mini-message structure, given
    # the drop of legacy color codes in modern minecraft versions. Additionally, mini-message
    # provides a much more robust processor capable of applying built-in effects with ease.
    #
    # To find out more on MiniMessage, view the documentation here:
    # https://docs.adventure.kyori.net/minimessage/index.html
    processor {

        # Specifies the text processor GTS should use when processing translations.
        # mini-message => The modern standard for text processing (e.g. "<green>Hello <yellow>World!")
        # legacy       => The common use standard (e.g. "&aHello &eWorld!")
        type = "mini-message"

        # When the type configuration above is set to legacy, this key determines the type of character
        # to use when parsing message inputs. For instance, this '&' symbol will translate color
        # codes when a string is formatted like such: "&aHello World". This would result in a green
        # colored text stating "Hello World".
        legacy-key = "&"
    }
}

# +----------------------------------------------------------------------------------------------+
# |                                       Storage Settings                                       |
# |                                                                                              |
# |     These settings govern how the plugin will maintain and manage its data set. GTS          |
# |     offers a wide set of options when it comes to data management, and it provides you       |
# |     the freedom to choose exactly how you wish to have it control that data. Note that       |
# |     if you wish to make use of GTS's multi-server capabilities, you'll need a storage        |
# |     service which can operate with multiple connections from different servers, such as      |
# |     MySQL or MariaDB.
# +----------------------------------------------------------------------------------------------+
storage {
    # How the plugin should store data
    #
    # - The various options are explained in more detail on the wiki:
    #   https://github.com/lucko/LuckPerms/wiki/Choosing-a-Storage-type
    #
    # - Possible options:
    #
    #   |  Remote databases - require connection information to be configured below
    #   |=> MySQL
    #   |=> MariaDB (preferred over MySQL)
    #   |=> PostgreSQL
    #
    #   |  Local databases - Databases which exist only locally
    #   |=> H2 (Default)
    #
    #   |  Readable & editable text files - don't require any extra configuration
    #   |=> JSON (.json files)
    #   |=> HOCON (.hocon)
    #   |=> YAML (.yaml)
    #
    # - The JSON flatfile provider is the default option.
    method = "h2"

    # The following configuration block is used to define the connection paramters for
    # your selected storage provider.
    #
    # NOTE: These settings are only neccessary when using remote databases. JSON and other
    # local storage providers require no connection information. If you are using a local
    # storage provider option, you can ignore this section
    data {

        # Defines the address and port for the database
        # - The standard DB engine port is used by default
        #   (MySQL = 3306, PostgreSQL = 5432)
        # - Specify as "host:port" if you use a different port
        address = "localhost"

        # Specifies the name of the database to store GTS data in.
        # - This database must already be created. GTS will make no attempt to create the database
        #   for you.
        database = "minecraft"

        # Connection credentials for the database
        username = "root"
        password = ""

        # These settings apply to the MySQL/MariaDB connection pool.
        # - The default values will typically be suitable for the majority of users.
        # - Do not change these settings unless you know what you're doing!
        pool-settings {

            # Sets the maximum size of the MySQL/MariaDB connection pool.
            # - Basically, this value will determine the maximum number of actual
            # connections to the database backend.
            # - More information about determining the size of connection pools can be found here:
            #   https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing
            maximum-pool-size = 10

            # Sets the minimum number of idle connections that the pool will try to maintain.
            # - For maximum performance and responsiveness to spike demands, it is recommended to not set
            #   this value and instead allow the pool to act as a fixed size connection pool.
            #   (set this value to the same as 'maximum-pool-size')
            minimum-idle = 10

            # This setting controls the maximum lifetime of a connection in the pool in milliseconds.
            # - The value should be at least 30 seconds less than any database or infrastructure imposed
            #   connection time limit.
            maximum-lifetime = 1800000 # 30 minutes

            # This setting controls the maximum number of milliseconds that the plugin will wait for a
            # connection from the pool, before timing out.
            connection-timeout = 5000 # 5 seconds

            # This setting allows you to define extra properties for connections.
            properties {
                useUnicode = true
                characterEncoding = "utf8"
            }
        }
    }

    # The prefix for all GTS SQL tables.
    # - Change this if you want to use different tables for different servers
    table-prefix = "gts_"
}
